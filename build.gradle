buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

// for importing properties file
file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

def mod_version = getVersionFromJava(file("src/main/java/com/kerwin/tutorialmod/reference/Version.java"))
version = "${config.minecraft.version}-${mod_version}"
group = "com.kerwin.tutorialmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "tutorialmod"

repositories {
    maven { // waila repo
        name "Mobius Repo"
        url "http://tehnut.info/maven"
    }
    maven { // jei
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // intWheel
        url "http://maven.k-4u.nl"
    }
    maven { // CoFH
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    maven {
        name = "ChickenBones maven"
        url = "http://chickenbones.net/maven/"
    }
}


minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "run"
    mappings = "snapshot_20171003"
    useDepAts = true
}

String mcVersion = config.minecraft.version

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    deobfCompile "codechicken:ChickenASM:1.12-${config.chickenasm.version}"
    deobfCompile "codechicken:CodeChickenLib:${mcVersion}-${config.ccl.version}:deobf"
    deobfCompile "codechicken:ForgeMultipart:${mcVersion}-${config.multipart.version}:deobf"
    deobfCompile "mezz.jei:jei_${mcVersion}:${config.jei.version}:api"
    deobfCompile "mcp.mobius.waila:Hwyla:${config.waila.version}_1.12:api"
    deobfCompile "cofh:RedstoneFlux:1.12-2.0.0.1:universal"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-${config.top.version}"
    deobfCompile "com.github.mcjty:intwheel:1.12-1.2.7"

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
apply plugin: 'java'

def getVersionFromJava(File file) {
    String major = "0"
    String minor = "0"
    String revision = "0"

    String prefix = "public static final int"
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 1)
            s = s.replace('=', ' ').replaceAll(" +", " ").trim()
            String[] pts = s.split(" ")

            if (pts[0] == "MAJOR") major = pts[pts.length - 1]
            else if (pts[0] == "MINOR") minor = pts[pts.length - 1]
            else if (pts[0] == "REVISION") revision = pts[pts.length - 1]
        }
    }
}
